# 浅拷贝copy：只对可变类型的第一层对象进行拷贝，对拷贝的独享开辟的内存空间进行存储，不会拷贝对象内部的子对象。
# 不可变类型对象的拷贝:只是拷贝了对象的引用，相当于快捷方式
import copy

# a1 = 123
# b1 = copy.copy(a1)
# print(id(a1), id(b1))
#
# a2 = (1, 2, 3)
# b2 = copy.copy(a2)
# print(id(a2), id(b2))

# 可变对象的拷贝
# a3 = [1, 2, 3, 4]
# b3 = copy.copy(a3)
# # 可变对象类型的拷贝，会开辟一个新的存储空间，其id地址也就不一样了，但是只会拷贝最表面一层
# print(id(a3), id(b3))

a4 = [1, 2, 3, 4, [5]]
b4 = copy.copy(a4)
# 下面的id地址就是一样的，所以这里称为浅拷贝
print(id(a4[4]), id(b4[4]))

# 深拷贝用到deepcopy，会对拷贝的对象开辟一个完全的空间，每一层都会拷贝过来
# 可变对象的深拷贝
a5 = [1, 2, 3, 4, [5]]
b5 = copy.deepcopy(a5)
# 下面的id地址就不一样了，这就是深拷贝，会完完全全从里到外拷贝一层
print(id(a5[4]), id(b5[4]))

# 不可变对象的深拷贝：和浅拷贝效果相同，相当于快捷方式
a1 = 123
b1 = copy.deepcopy(a1)
print(id(a1), id(b1))

"""
总结：
对于不可变对象：不可变对象的深拷贝与浅拷贝效果相同，都是创建一个快捷方式
对于可变对象：浅拷贝只能拷贝一层，嵌套内容的id都是相同的；深拷贝就不一样了，深拷贝可能拷贝对象的多层，相当于一个完完全的新东西
"""
